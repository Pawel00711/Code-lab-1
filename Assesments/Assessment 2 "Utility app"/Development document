



C++ Vending Machine Program – Design, Implementation, and Evaluation

 
Introduction
This report documents the design, implementation, and evaluation of a C++-based vending machine program developed as part of the Utility App assignment. The main project goal was to create a complete working console application that enables the user to buy and sell products, make payments, and get change, as well as be able to communicate with a realistic stock system. On top of the minimum, the system also adds user accounts, loyalty and administration restocking tools, promotional offers, and history tracking of orders. This paper describes the program specification, provides a system flow chart, discusses important technical decisions with a detailed walkthrough, and offers a critical reflection on the successes and potential improvements.
Specification
This is a C++ console-based vending machine application that allows the user to purchase watches, cases, and extras with the help of a simple text menu. The system presents a straightforward menu, accepts user input, accepts payments, gives out the right change, and gives out messages in cases where things are dispensed. It also involves checking for errors to prevent unacceptable entries, and sufficient inventory is checked before buying. The additional options are the product categories, stock tracking, loyalty points, special offers, and free delivery of large orders. It also has an admin mode where one can restock, edit prices, and order suppliers, as well as view order history for the logged-in users.
System Flowchart and Explanation
The system flowchart illustrates the entire procedure of the vending machine program. The program opens with an option of logging in, registering, or being a guest. It then shows the home page where one can either purchase watches, purchase extras, see the offers, view order history, redeem loyalty points, or quit. Once the user decides to purchase something, the program will take them through the process of purchasing something, including selecting an item, verifying the quantity and payment, including giving change. Once purchased, the stock is updated, and loyalty points are accumulated. With the entry of the admin password, the menu of the administration appears and allows one to restock, change the prices, and make orders with suppliers (Alrehily et al., 2015). 
 
3. Technical Description & Walkthrough
3.1 Program Structure
The vending machine is the foundation of the program, and it has all the logic and decides how the program operates (Iglberger, 2022). This class handles products, users, as well as menu system. I stored the data with the help of several structs: Product, the name, price, and stock of each item, User, login details, loyalty points, and the history of orders, UserOrder, one purchase, and OrderItem, an item in an order. I applied the map containers to categorise watches, cases, and extras by name, and hence it is easy to locate and update products. This structure maintains the program to be clear and organised.
3.2 Menu System & User Input
The program has a basic text menu system that leads the user through the program. The display_main_menu() function displays the main menu choices, which include the purchase of a watch, purchase of extras, view of offers, order history, loyalty points, and exit of the program. The user is required to input his or her decision by typing it in using the keyboard, and the program will read it by using cin. The get_user_input_int() function is used to ensure that the input is right. This operation continues to request the user to input a valid number within the range until he/she enters a valid number. Once a valid choice has been typed in, a switch statement is executed, which causes the appropriate function to be called. On typing in the username admin123, the program will open a hidden mode of administration rather than the usual menu. This menu will allow the admin to see stock, change price, restock items or order suppliers and get back to the main menu.
3.3 Purchasing Process
The primary role of a purchased watch is buy_watches_process(). It provides a user with a very easy step-by-step exercise. The user will then choose the watch that they desire out of the models available on a list. Then they decide how much they are going to purchase, ensuring that it does not surpass the inventory. They then choose a case and an additional second item, like a strap in the program. After all the choices are taken, the cost is computed by the program by summing up the price of the watch (Multiply the quantity), case, and extra. There are special offers built in: if the user buys a smartwatch, its price is discounted, and if they buy two or more analog watches with no extras, they get a free spare strap automatically. Before checkout, check_stock() confirms there is enough stock for all items. If something is out of stock, handle_stock_issue() lets the user try again by changing their order or cancel it completely.
3.4 Money Handling & Change
The process payment is a procedure employed by the program to process_payment(). It provides the user with a clear outline of the items in order, with prices and the total cost. The program uses whole numbers (pounds) as opposed to decimals in order to eliminate rounding errors. The user is requested to feed in money, and the program maintains a running amount until the entire amount is paid. When the user enters 0, then he/she is making a card payment, and the payment is immediately accepted. Then the give_change() method is invoked to see whether the user paid the amount that exceeds the cost. In case they did, the program compares the difference and shows how much change they will get. This ensures that the user invariably receives back the right amount of money. The combination of these functions provides the user with an easy and realistic payment process.
3.5 Stock & User Management
The stock and user data are tracked in the program to make the system realistic. Once an order has been made successfully, the reduce_stock() function will update the quantity of each item to ensure that the stock is appropriate. The user information is stored in a file known as users.txt. This file is read by the load users function at the beginning of the program when loading existing users, their loyalty points and their order history. The save users() function stores any new information in the file when the program is terminated, hence nothing is lost. Viewing past purchases (view order history) is only availed to the logged-in users. They may also redeem their loyalty points using redeem loyalty points so that when they accumulate the required points, they are given a discount of £10.
3.6 Admin Features
The program contains an undercover administrative mode to control the vending machine. Upon entering the password of the user, which is the password, admin123, the admin_menu() function is displayed. The administrator can use this menu in a number of ways. They can see all the existing stock of watches, cases, and extras. The restock feature allows them to include additional units to any product and maintain the machine as full. The change price option allows the admin to update product prices directly. There is also a supplier order option that uses place_supplier_order() to simulate ordering new stock. This function adds a short delay using this_thread::sleep_for to make it feel realistic, as if the machine is waiting for delivery before updating the stock.
3.7 Extra Features & UX Enhancements
The program has additional functionality to make it more enjoyable and entertaining to the user. Upon making a purchase, the user is presented with an entertainment menu as he or she waits to receive his or her order. They may decide to watch a video, play a simple game or simply wait and this makes the program to be more interactive. Stock levels are also checked after each purchase by the system. In case any product is running out, a vivid notification is displayed to enable the admin to replenish it within a short time. Large order delivery is also a helpful feature that is free. When the cost exceeds the free delivery limit, the user is prompted whether to have their good delivered to their house or not. This makes it realistic and enhances the whole shopping experience for the user.
4. Critical Reflection
This project successfully meets the brief with a clear console interface, well-structured classes, and strong input validation. Features like loyalty points, order history, and admin tools add realism. Challenges included saving user data in plain text and changing product prices directly for offers, which could affect later orders. Future improvements include saving data in JSON, separating discount logic, and adding receipts (Saed & Nayef, 2023). I also plan to learn better OOP design, exception handling, and automated testing to make the program more reliable and professional.
Conclusion
The vending machine project meets and goes beyond the assignment requirements. It provides a complete buying experience with stock management, loyalty rewards, and admin tools. This project has helped me understand object-oriented programming, file handling, and input validation in C++. It also improved my ability to design clear menus and manage program flow. Although there are areas that can be improved, such as using better storage formats and refining discount logic, the program is functional, well-structured, and enjoyable to use. Overall, this project has been a valuable learning experience and an important step in developing my programming skills.
 
References
Alrehily, A., Fallatah, R. and Thayananthan, V., 2015. Design of vending machine using finite state machine and visual automata simulator. International Journal of Computer Applications, 115(18). https://www.researchgate.net/profile/Vijey-Thayananthan/publication/276136463_Design_of_Vending_Machine_using_Finite_State_Machine_and_Visual_Automata_Simulator/links/5642374008aec448fa62323b/Design-of-Vending-Machine-using-Finite-State-Machine-and-Visual-Automata-Simulator.pdf
Iglberger, K., 2022. C++ Software Design. " O'Reilly Media, Inc." https://books.google.com/books?hl=en&lr=&id=ovSKEAAAQBAJ&oi=fnd&pg=PP1&dq=C%2B%2B+Software+Design+Design+Principles+and+Patterns+for+High-Quality+Software+Klaus+Iglberger&ots=HhbC8DQlc1&sig=4Wwvah58SAplv9p6lmVAYz9m6ec
Saed, M. and Nayef, H., 2023. Design and Development of a Vending Machine. https://repository.najah.edu/bitstreams/f4a95532-960f-4230-aac5-e7685f7e44de/download


